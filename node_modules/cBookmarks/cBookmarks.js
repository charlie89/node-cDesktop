var fs = require('fs');
var gzip = require('zlib').gzip;
var gunzip = require('zlib').gunzip;
var db;

fs.readFile(__rootpath + '/db/bookmarks.db', function (err, data) {
   if (err) {
      db = require('taffydb')();
      if (__debug) console.log('CREATED EMPTY Bookmarks DB');   
      return;
   }
   gunzip(data, function (err, buf) {
      db = require('taffydb')(JSON.parse(buf));  
      if (__debug) console.log('IMPORTED DB with ' + db().count() + ' objects') 
   });   
});

exports.db = function () { return db; };

exports.route = [{
   api: 'bookmarks',
   method: 'GET',
   callback: search
}];

function search(req, res) {
   res.end('NIY');
}

function importBookmarks(req, res) { //import local bookmark file (must be enabled in router)
   res.writeHead(200, {
		'Content-Type': 'application/json; charset=UTF-8'
	});
	fs.readFile(__rootpath + '/bookmarks.html', function (err, data) {
	   if (err) throw err;
	   
      var bookmarks = parseBookmarks(data);
      bookmarks.forEach(function (bookmark) {   
         db.insert(bookmark);
      });
	gzip(db().stringify(), function (err, buf) {
	     fs.writeFile(__rootpath + '/db/bookmarks.db', buf, function (err) {
            if (err) throw err;
            console.log('It\'s saved!');
         });
      });
	   
      res.end('Inserted ' + bookmarks.length + ' Bookmarks.');        
   });	   
};

// Converts the chrome bookmarks (html) into an object for importing into the db
function parseBookmarks(bm) {
   function parseBookmark(bookmark) {
      var link = bookmark.split('"');
      var deleteCaption = false;
         
      // unusable element on beginning  
      if ((result.length === 0) && link[0].match('<META')) return;
                  
      // new caption (=tag)
      if (link[0].substr(0, 3) === '<H3') {
         caption = link[link.length -1]
         .substring(1,link[link.length -1]
         .lastIndexOf('</H3>'));
         return;
      }
   
      // calculate name
      var bookmarkname = (link.length > 5) ? link[6] : link [4];
      if (typeof bookmarkname === 'string') {
         var bookmarknamearr = bookmarkname
         .substr(1,bookmarkname.length)
         .split('</A>');
         
         deleteCaption = (bookmarknamearr[1].match('</DL>'));
         
         bookmarkname = bookmarknamearr[0];
      }
           
      if (trim(link[1]) !== '') {           
         result.push({
            href: link[1],
            date: link[3],
            icon: (link.length > 5) ? link[5] : '',
            name: bookmarkname,
            tags: caption   
         });
      }
      
      if (deleteCaption) caption = '';
   }   
   
   var result = [];
   var caption = '';
   bm = '' + bm; //convert to string
   
   var dls = bm.split('<DL>');

   dls.forEach(function(dl) {
      var dts = dl.split('<DT>');

      dts.forEach(parseBookmark);   
   });
   
   return result;
}