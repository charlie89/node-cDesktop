(function(context) {
	var url = require("url");
   var routes = [];
   var socketIOListeners = [];

   // returns 404 error page
	function default404(req, res) {
		var body = "404'd";
		res.writeHead(404, {
			"Content-Length": body.length,
			"Content-Type": "text/plain"
		});
		res.end(body);

		console.log("Someone 404'd: " + req.url);
	}

   // returns 503 error page
	function default503(req, res, err) {
		var body = [ "503'd" ];
		body.push("An exception was thrown while accessing: " + req.method + " " + req.url);
		body.push("Exception: " + err.message);
		body.push(err.stack);
		body = body.join("\n");
		res.writeHead(503, {
			"Content-Length": body.length,
			"Content-Type": "text/plain"
		});
		res.end(body);

		console.error("Error accessing: " + req.method + " " + req.url);
		console.error(err.message);
		console.error(err.stack);
	}

   // generates cURL object
	function parseURL(req){
		var cURL = url.parse(decodeURIComponent(req.url), true); //URL umbedingt decoden (zB %20 -> " ")
		var patharr = cURL.pathname.split('/');
		patharr.shift();   // first element is 0
		cURL.api = patharr.shift();
		cURL.path = patharr;
		cURL.pathname = patharr.join('/');
		cURL.method = req.method;
		req.cURL = cURL;
	}
	
	// executed from all server requests, if no suitable function available then 404
	function handler(req, res){
		parseURL(req);
      if (__debug) console.log(req.cURL.method + ' ' + req.cURL.api + '/' + req.cURL.pathname);

		if (typeof routes[req.cURL.api] !=="undefined"){
			if (typeof routes[req.cURL.api][req.cURL.method] !== 'undefined'){
				if (req.cURL.method === 'POST'){
					var post = "";
					req.on('data', function(data) {
						post += data;
					});
					req.on('end', function() {
						console.log("POST Data: " + post);
							if (post.length > 0)
							   req.post = JSON.parse(post);
							callRoute(routes[req.cURL.api][req.cURL.method], req, res);
					});
					return;
				}
   			callRoute(routes[req.cURL.api][req.cURL.method], req, res);
				return;
			}
		}
		default404(req, res);
	}
	
	// executes request
	function callRoute(route, req, res){
		res.error404 = function(){
			default404(req, res);
		};
		res.error503 = function(){
			default503(req, res);
		};
		route(req, res);
	}
	
	// adds one or more routes (GET, POST, UPDATE or DELETE)
	function addRoute(newroutes){
		if (!Array.isArray(newroutes))
		{
			var helper = newroutes;
			newroutes = [helper];
		}
		newroutes.forEach(function(newroute){
			if (typeof routes[newroute.api] !== 'undefined')
				if (typeof routes[newroute.api][newroute.method] !== 'undefined')
					console.warn("WARN: cRouter: Adding double route");
			routes[newroute.api]=routes[newroute.api]||[];
			routes[newroute.api][newroute.method]=newroute.callback;
		});
	}

   // adds all registered listeners to socket.io object
   function addSocketIO(socketIO){
      socketIO.sockets.on('connection', function (socket) {
         console.log('NEW SOCKET');
         socketIOListeners.forEach(function (listener) {
            listener(socket);
         });        
      });
   }
   
   // automatically adds routes and socketIOListener if available
   function add(obj) {
      if (obj.hasOwnProperty('route')) addRoute(obj.route);   
      if (obj.hasOwnProperty('socketIOListener')) addSocketIOListener(obj.socketIOListener);
   }
   
   // adds socketIO listener
   function addSocketIOListener(listeners) {
      if (!Array.isArray(listeners))
		{
			var helper = listeners;
			listeners = [helper];
		}
		listeners.forEach(function(listener){
			socketIOListeners.push(listener);
		});
   }

   exports.route = handler;
   exports.add = add;
	exports.addRoute = addRoute; 
	exports.addSocketIOListener = addSocketIOListener;
   exports.addSocketIO = addSocketIO;	
	
})(exports);
